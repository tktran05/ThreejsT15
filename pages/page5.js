// AUTHOR: Tr·∫ßn Trung Ki√™n - ID: 20233859
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

export function init(container) {
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    10000
  );

  camera.position.set(200, 200, 300);
  camera.lookAt(0, 0, 0);

  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xfce4ec); // M√†u n·ªÅn h·ªìng nh·∫°t

  // üí° √Ånh s√°ng
  const ambient = new THREE.HemisphereLight(0xffffff, 0xbfd4d2, 1.5);
  scene.add(ambient);

  const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
  directionalLight.position.set(1, 1, 1).normalize().multiplyScalar(100); // G√≥c xi√™n 45 ƒë·ªô, ƒë√®n ·ªü xa
  directionalLight.castShadow = true;

  // ‚ú® ƒêi·ªÅu ch·ªânh target c·ªßa ƒë√®n ƒë·ªÉ bao ph·ªß t·∫•t c·∫£ v·∫≠t th·ªÉ ƒë·ªï b√≥ng
  directionalLight.target.position.set(0, 45, -20); // ƒê·∫∑t target cao h∆°n v√† l√πi v·ªÅ ƒë·ªÉ bao ph·ªß c√°c c·ªôt v√† n·ªÅn t·∫£ng
  scene.add(directionalLight.target); // R·∫•t quan tr·ªçng: Th√™m target v√†o scene ƒë·ªÉ n√≥ c√≥ hi·ªáu l·ª±c

  directionalLight.shadow.mapSize.setScalar(2048); // ƒê·ªô ph√¢n gi·∫£i b√≥ng cao
  directionalLight.shadow.bias = -0.0001;
  directionalLight.shadow.normalBias = 0.0001;

  // ‚ú® TƒÉng k√≠ch th∆∞·ªõc v√πng chi·∫øu b√≥ng ƒë·ªÉ bao ph·ªß to√†n b·ªô c·∫£nh
  const shadowCameraSize = 200; // TƒÉng k√≠ch th∆∞·ªõc l√™n 200 ƒë∆°n v·ªã
  directionalLight.shadow.camera.left = -shadowCameraSize;
  directionalLight.shadow.camera.right = shadowCameraSize;
  directionalLight.shadow.camera.top = shadowCameraSize;
  directionalLight.shadow.camera.bottom = -shadowCameraSize;
  directionalLight.shadow.camera.near = 1;
  directionalLight.shadow.camera.far = 500;
  directionalLight.shadow.camera.updateProjectionMatrix(); // C·∫≠p nh·∫≠t camera sau khi thay ƒë·ªïi th√¥ng s·ªë

  scene.add(directionalLight);

  // Helpers (r·∫•t h·ªØu √≠ch ƒë·ªÉ debug v√πng chi·∫øu b√≥ng)
  const lightHelper = new THREE.DirectionalLightHelper(directionalLight, 10, 0xffff00);
  scene.add(lightHelper);
  // ‚ú® B·ªè comment helper n√†y ƒë·ªÉ xem v√πng chi·∫øu b√≥ng c·ªßa ƒë√®n
  const shadowCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera);
  scene.add(shadowCameraHelper);


  // Renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // Gi√∫p b√≥ng m∆∞·ª£t m√† h∆°n
  container.appendChild(renderer.domElement);

  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;

  const axesHelper = new THREE.AxesHelper(100);
  scene.add(axesHelper);

  // üå± M·∫∑t ƒë·∫•t
  const plane = new THREE.Mesh(
    new THREE.PlaneGeometry(500, 500),
    new THREE.MeshLambertMaterial({
      color: 0x87ceeb, // M√†u xanh da tr·ªùi
      side: THREE.DoubleSide,
    })
  );
  plane.rotation.x = -Math.PI / 2;
  plane.position.y = 0;
  plane.receiveShadow = true;
  scene.add(plane);

  // üè† Ng√¥i nh√† v√† c√°c th√†nh ph·∫ßn
  const house = House();
  scene.add(house);

  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
    // C·∫≠p nh·∫≠t helper c·ªßa camera ƒë·ªï b√≥ng ƒë·ªÉ n√≥ lu√¥n hi·ªÉn th·ªã ƒë√∫ng v·ªã tr√≠
    if (shadowCameraHelper) shadowCameraHelper.update();
  }

  animate();
}

export function House(){
    const group = new THREE.Group()
    
    const stairs = mainStairs()
    // stairs.position.z = 10
    group.add(stairs)
    const stairs1 = Stairs(5)
    stairs1.position.x = 170
    stairs1.position.z = -80
    stairs1.rotation.y = Math.PI / 2;
    group.add(stairs1)

    const stairs2 = Stairs(5)
    stairs2.position.x = -170
    stairs2.position.z = -80
    stairs2.rotation.y = -Math.PI / 2;
    group.add(stairs2)

    
    const material3 = new THREE.MeshLambertMaterial({ color: 0x078997 });
    const geometry3 = new THREE.BoxGeometry(300, 12, 90);
    const mesh3 = new THREE.Mesh(geometry3, material3)
    mesh3.position.y = 6
    mesh3.position.z = - 80
    group.add(mesh3)

    const material4 = new THREE.MeshLambertMaterial({ color: 0x79888a });
    const geometry4 = new THREE.BoxGeometry(1, 60, 6);
    const mesh4 = new THREE.Mesh(geometry4, material4)
    mesh4.position.x = 20
    mesh4.position.y = 40
    mesh4.position.z = -39
    mesh4.castShadow = true;
    mesh4.receiveShadow = true; 
    group.add(mesh4)

    const mesh5 = new THREE.Mesh(geometry4, material4)
    mesh5.position.x = 18
    mesh5.position.y = 40
    mesh5.position.z = -39
    mesh5.castShadow = true;
    mesh5.receiveShadow = true; 

    group.add(mesh5)

    const mesh6 = new THREE.Mesh(geometry4, material4)
    mesh6.position.x = -20
    mesh6.position.y = 40
    mesh6.position.z = -39
    mesh6.castShadow = true;
    mesh4.receiveShadow = true; 
    group.add(mesh6)

    const mesh7 = new THREE.Mesh(geometry4, material4)
    mesh7.position.x = -18
    mesh7.position.y = 40
    mesh7.position.z = -39
    mesh7.castShadow = true;
    mesh7.receiveShadow = true; 

    group.add(mesh7)







    return group


    //function con 
    function Stairs(step) {
        const stairs = new THREE.Group();
        const material = new THREE.MeshLambertMaterial({ color: 0x8B4513 }); 
        let width = 4
        let height = 2
        for (let i = 0; i < step; i++) {
            const geometry = new THREE.BoxGeometry(30, height, 4);
            const step = new THREE.Mesh(geometry, material);
            step.position.y = height/2
            step.position.z = - width/2
            height = height + 2
            width = width + 8
            step.castShadow = true;
            step.receiveShadow = true; 
            stairs.add(step);
        }

        return stairs; 
}

    function mainStairs(){
        const group = new THREE.Group()
        const shape = new THREE.Shape();
        const stairs = Stairs(5)
        group.add(stairs)
    
        // Tam gi√°c vu√¥ng t·∫°i g·ªëc (0,0)
        shape.moveTo(0, 0);           // A
        shape.lineTo(80, 0);       // B
        shape.lineTo(0, 10);      // C
        shape.lineTo(0, 0);           // quay l·∫°i A ƒë·ªÉ ƒë√≥ng ƒë∆∞·ªùng
        
        const extrudeSettings = {
            depth: 15,           // ƒë·ªô d√†y (theo tr·ª•c Z)
            bevelEnabled: false         // kh√¥ng bo g√≥c
        };
        
        const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
        
        const material = new THREE.MeshLambertMaterial({ color: 0xffffff });
        const mesh = new THREE.Mesh(geometry, material);
        mesh.position.x = 15
        mesh.position.z = -35
        group.add(mesh)
    
        const shape1 = new THREE.Shape();
    
        // Tam gi√°c vu√¥ng t·∫°i g·ªëc (0,0)
        shape1.moveTo(0, 0);           // A
        shape1.lineTo(-80, 0);       // B
        shape1.lineTo(0, 10);      // C
        shape1.lineTo(0, 0);           // quay l·∫°i A ƒë·ªÉ ƒë√≥ng ƒë∆∞·ªùng
        
        const extrudeSettings1 = {
            depth: 15,           // ƒë·ªô d√†y (theo tr·ª•c Z)
            bevelEnabled: false         // kh√¥ng bo g√≥c
        };
        
        const geometry1 = new THREE.ExtrudeGeometry(shape1, extrudeSettings1);
        
        const material1 = new THREE.MeshLambertMaterial({ color: 0xffffff });
        const mesh1 = new THREE.Mesh(geometry1, material1);
        mesh1.position.x = -15
        mesh1.position.z = -35
        group.add(mesh1)

        const geometry2 = new THREE.BoxGeometry(30, 10, 15);
        const mesh2 = new THREE.Mesh(geometry2, material)
        mesh2.position.y = 5
        mesh2.position.z = - 27.5
        group.add(mesh2)


        return group
    }

    function cot(numColumns, columnWidth, columnHeight, columnDepth, spacing) {
        const columnsGroup = new THREE.Group(); // T·∫°o m·ªôt nh√≥m ƒë·ªÉ ch·ª©a t·∫•t c·∫£ c√°c c·ªôt
    
        // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh v√† ƒë·∫£m b·∫£o c√°c tham s·ªë h·ª£p l·ªá
        numColumns = Math.max(1, Math.floor(numColumns || 5)); // T·ªëi thi·ªÉu 1 c·ªôt
        columnWidth = columnWidth || 1;    // Chi·ªÅu r·ªông m·∫∑c ƒë·ªãnh
        columnHeight = columnHeight || 20; // Chi·ªÅu cao m·∫∑c ƒë·ªãnh
        columnDepth = columnDepth || 5;    // Chi·ªÅu s√¢u m·∫∑c ƒë·ªãnh
        spacing = spacing || 10;           // Kho·∫£ng c√°ch m·∫∑c ƒë·ªãnh gi·ªØa c√°c c·ªôt
    
        // V·∫≠t li·ªáu cho c√°c c·ªôt (v√≠ d·ª•: m√†u x√°m ƒë√°)
        const material = new THREE.MeshLambertMaterial({ color: 0x808080 }); 
    
        // T√≠nh to√°n t·ªïng chi·ªÅu d√†i m√† c√°c c·ªôt v√† kho·∫£ng c√°ch chi·∫øm d·ª•ng
        // V√≠ d·ª•: 3 c·ªôt, m·ªói c·ªôt r·ªông 5, kho·∫£ng c√°ch 10 => 5 + 10 + 5 + 10 + 5 = 35
        const totalWidth = (numColumns * columnWidth) + ((numColumns - 1) * spacing);
    
        // T√≠nh to√°n v·ªã tr√≠ X b·∫Øt ƒë·∫ßu ƒë·ªÉ c√°c c·ªôt ƒë∆∞·ª£c cƒÉn gi·ªØa quanh g·ªëc t·ªça ƒë·ªô (0,0,0)
        const startX = -totalWidth / 2 + columnWidth / 2;
    
        // V√≤ng l·∫∑p ƒë·ªÉ t·∫°o t·ª´ng c·ªôt
        for (let i = 0; i < numColumns; i++) {
            // T·∫°o h√¨nh h·ªçc cho c·ªôt hi·ªán t·∫°i
            const geometry = new THREE.BoxGeometry(columnWidth, columnHeight, columnDepth);
            const column = new THREE.Mesh(geometry, material);
    
            // ƒê·∫∑t v·ªã tr√≠ X c·ªßa c·ªôt
            // V·ªã tr√≠ X c·ªßa c·ªôt hi·ªán t·∫°i = startX + (ch·ªâ s·ªë c·ªôt * (chi·ªÅu r·ªông c·ªôt + kho·∫£ng c√°ch))
            column.position.x = startX + i * (columnWidth + spacing);
            
            // ƒê·∫∑t v·ªã tr√≠ Y c·ªßa c·ªôt (ƒë·ªÉ ƒë√°y c·ªôt n·∫±m tr√™n m·∫∑t ph·∫≥ng Y=0)
            column.position.y = columnHeight / 2;
            
            // ƒê·∫∑t v·ªã tr√≠ Z c·ªßa c·ªôt (m·∫∑c ƒë·ªãnh ·ªü 0)
            column.position.z = 0;
    
            // K√≠ch ho·∫°t ƒë·ªï b√≥ng cho c·ªôt
            column.castShadow = true;
            column.receiveShadow = true;
    
            // Th√™m c·ªôt v√†o nh√≥m
            columnsGroup.add(column);
        }
    
        return columnsGroup; // Tr·∫£ v·ªÅ nh√≥m ch·ª©a t·∫•t c·∫£ c√°c c·ªôt
    }

}